/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Arion Digital (https://sketchfab.com/andrewswihart)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/robot-arm-animation-213de09d83d84b5da297a3738ee94cc3
Title: Robot Arm Animation
*/

import React, { useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useState } from "react";
import { useEffect } from "react";
import { useThree } from "@react-three/fiber";
import { useFrame } from "@react-three/fiber";

export function RobotArm({
  isRotating,
  setIsRotating,
  setCurrentStage,
  ...props}) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/robot_arm_animation.glb");
  const { actions } = useAnimations(animations, group);

  const [name, setName] = useState("Take 001")

  useEffect(() => {
    actions[name].reset().fadeIn(0.5).play()
    return () => actions[name].fadeOut(0.5)
  }, [name])

  
  // Get access to the Three.js renderer and viewport
  const { gl, viewport } = useThree();

    // Use a ref for the last mouse x position
    const lastX = useRef(0);
    // Use a ref for rotation speed
    const rotationSpeed = useRef(0);
    // Define a damping factor to control rotation damping
    const dampingFactor = 0.95;
  
    // Handle pointer (mouse or touch) down event
    const handlePointerDown = (event) => {
      event.stopPropagation();
      event.preventDefault();
      setIsRotating(true);
  
      // Calculate the clientX based on whether it's a touch event or a mouse event
      const clientX = event.touches ? event.touches[0].clientX : event.clientX;
  
      // Store the current clientX position for reference
      lastX.current = clientX;
    };
  
    // Handle pointer (mouse or touch) up event
    const handlePointerUp = (event) => {
      event.stopPropagation();
      event.preventDefault();
      setIsRotating(false);
    };
  
    // Handle pointer (mouse or touch) move event
    const handlePointerMove = (event) => {
      event.stopPropagation();
      event.preventDefault();
      if (isRotating) {
        // If rotation is enabled, calculate the change in clientX position
        const clientX = event.touches ? event.touches[0].clientX : event.clientX;
  
        // calculate the change in the horizontal position of the mouse cursor or touch input,
        // relative to the viewport's width
        const delta = (clientX - lastX.current) / viewport.width;
  
        // Update the island's rotation based on the mouse/touch movement
        group.current.rotation.y += delta * 0.01 * Math.PI;
  
        // Update the reference for the last clientX position
        lastX.current = clientX;
  
        // Update the rotation speed
        rotationSpeed.current = delta * 0.01 * Math.PI;
      }
    };
  
    // Handle keydown events
    const handleKeyDown = (event) => {
      if (event.key === "ArrowLeft") {
        if (!isRotating) setIsRotating(true);
  
        group.current.rotation.y += 0.005 * Math.PI;
        rotationSpeed.current = 0.007;
      } else if (event.key === "ArrowRight") {
        if (!isRotating) setIsRotating(true);
  
        group.current.rotation.y -= 0.005 * Math.PI;
        rotationSpeed.current = -0.007;
      }
    };
  
    // Handle keyup events
    const handleKeyUp = (event) => {
      if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
        setIsRotating(false);
      }
    };
  
    useEffect(() => {
      // Add event listeners for pointer and keyboard events
      const canvas = gl.domElement;
      canvas.addEventListener("pointerdown", handlePointerDown);
      canvas.addEventListener("pointerup", handlePointerUp);
      canvas.addEventListener("pointermove", handlePointerMove);
      window.addEventListener("keydown", handleKeyDown);
      window.addEventListener("keyup", handleKeyUp);
  
      // Remove event listeners when component unmounts
      return () => {
        canvas.removeEventListener("pointerdown", handlePointerDown);
        canvas.removeEventListener("pointerup", handlePointerUp);
        canvas.removeEventListener("pointermove", handlePointerMove);
        window.removeEventListener("keydown", handleKeyDown);
        window.removeEventListener("keyup", handleKeyUp);
      };
    }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);
  
    // This function is called on each frame update
    useFrame(() => {
      // If not rotating, apply damping to slow down the rotation (smoothly)
      if (!isRotating) {
        // Apply damping factor
        rotationSpeed.current *= dampingFactor;
  
        // Stop rotation when speed is very small
        if (Math.abs(rotationSpeed.current) < 0.001) {
          rotationSpeed.current = 0;
        }
  
        group.current.rotation.y += rotationSpeed.current;
      } else {
        // When rotating, determine the current stage based on island's orientation
        const rotation = group.current.rotation.y;
  
        /**
         * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
         * The goal is to ensure that the rotation value remains within a specific range to
         * prevent potential issues with very large or negative rotation values.
         *  Here's a step-by-step explanation of what this code does:
         *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
         *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
         *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
         *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
         *     This is done to ensure that the value remains positive and within the range of
         *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
         *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
         *     modulo operation to the value obtained in step 2. This step guarantees that the value
         *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
         *     circle in radians.
         */
        const normalizedRotation =
          ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
  
        // Set the current stage based on the island's orientation
        switch (true) {
          case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
            setCurrentStage(4);
            break;
          case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
            setCurrentStage(3);
            break;
          case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
            setCurrentStage(2);
            break;
          case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
            setCurrentStage(1);
            break;
          default:
            setCurrentStage(null);
        }
      }
    });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group
            name="50c85fbcdbeb4b29b9e0fe7c7a4f8e64fbx"
            rotation={[Math.PI / 2, 0, 0]}
          >
            <group name="Object_2">
              <group name="RootNode">
                <group
                  name="Base"
                  position={[-4.225, 1.754, 1.377]}
                  rotation={[-Math.PI / 2, 0, 0]}
                >
                  <group name="Object_5" position={[30.896, 30.621, 29.898]}>
                    <mesh
                      name="Base_Robot_obj_Base_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.Base_Robot_obj_Base_0.geometry}
                      material={materials.Robot_obj_Base}
                    />
                  </group>
                  <group name="Shoulder" position={[0.39, -0.391, 17.089]}>
                    <group name="Object_8" position={[30.966, 30.614, 12.809]}>
                      <mesh
                        name="Shoulder_Robot_obj_Shoulder_0"
                        castShadow
                        receiveShadow
                        geometry={nodes.Shoulder_Robot_obj_Shoulder_0.geometry}
                        material={materials.Robot_obj_Shoulder}
                      />
                    </group>
                    <group
                      name="UpperArm"
                      position={[17.363, 0.581, 7.448]}
                      rotation={[0, -0.016, 0]}
                    >
                      <group
                        name="Object_11"
                        position={[13.602, 30.033, 5.361]}
                      >
                        <mesh
                          name="UpperArm_Robot_obj_UpperArm_0"
                          castShadow
                          receiveShadow
                          geometry={
                            nodes.UpperArm_Robot_obj_UpperArm_0.geometry
                          }
                          material={materials.Robot_obj_UpperArm}
                        />
                      </group>
                      <group
                        name="ForeArm"
                        position={[-0.316, 12.886, 48.232]}
                        rotation={[0, 0.03, 0]}
                      >
                        <group
                          name="Object_14"
                          position={[13.918, 17.147, -42.871]}
                        >
                          <mesh
                            name="ForeArm_Robot_obj_ForeArm_0"
                            castShadow
                            receiveShadow
                            geometry={
                              nodes.ForeArm_Robot_obj_ForeArm_0.geometry
                            }
                            material={materials.Robot_obj_ForeArm}
                          />
                        </group>
                        <group name="Hand" position={[41.145, -0.02, 8.614]}>
                          <group
                            name="Object_17"
                            position={[-27.227, 17.167, -51.485]}
                          >
                            <mesh
                              name="Hand_Robot_obj_Hand_0"
                              castShadow
                              receiveShadow
                              geometry={nodes.Hand_Robot_obj_Hand_0.geometry}
                              material={materials.Robot_obj_Hand}
                            />
                          </group>
                          <group
                            name="Finger"
                            position={[12.328, 4.238, -0.945]}
                            rotation={[0, -0.014, 0]}
                          >
                            <group
                              name="Object_20"
                              position={[-39.554, 12.929, -50.54]}
                            >
                              <mesh
                                name="Finger_Robot_obj_Finger_0"
                                castShadow
                                receiveShadow
                                geometry={
                                  nodes.Finger_Robot_obj_Finger_0.geometry
                                }
                                material={materials.Robot_obj_Finger}
                              />
                            </group>
                            <group
                              name="Box001"
                              position={[4.401, -3.916, -81.426]}
                            >
                              <mesh
                                name="Box001_09_-_Default_0"
                                castShadow
                                receiveShadow
                                geometry={
                                  nodes["Box001_09_-_Default_0"].geometry
                                }
                                material={materials["09_-_Default"]}
                              />
                              <group
                                name="Text005"
                                position={[-15.01, 0.03, 12.416]}
                                rotation={[Math.PI / 2, -1.571, 0]}
                                scale={0.078}
                              >
                                <mesh
                                  name="Text005_03_-_Default_0"
                                  castShadow
                                  receiveShadow
                                  geometry={
                                    nodes["Text005_03_-_Default_0"].geometry
                                  }
                                  material={materials["03_-_Default"]}
                                />
                              </group>
                            </group>
                          </group>
                        </group>
                      </group>
                    </group>
                    <group name="Cylinder" position={[-6.648, -1.143, 6.552]}>
                      <group
                        name="Object_27"
                        position={[37.614, 31.756, 6.257]}
                      >
                        <mesh
                          name="Cylinder_Robot_obj_Cylinder_0"
                          castShadow
                          receiveShadow
                          geometry={
                            nodes.Cylinder_Robot_obj_Cylinder_0.geometry
                          }
                          material={materials.Robot_obj_Cylinder}
                        />
                      </group>
                    </group>
                  </group>
                </group>
                <group
                  name="Circle001"
                  position={[-4.225, -25.158, 1.377]}
                  rotation={[-Math.PI / 2, 0, 0]}
                >
                  <mesh
                    name="Circle001_08_-_Default_0"
                    castShadow
                    receiveShadow
                    geometry={nodes["Circle001_08_-_Default_0"].geometry}
                    material={materials["08_-_Default"]}
                  />
                  <group
                    name="Text006"
                    position={[-75.16, -1.01, 3.86]}
                    rotation={[0, 0, -Math.PI / 2]}
                    scale={0.365}
                  >
                    <mesh
                      name="Text006_02_-_Default_0"
                      castShadow
                      receiveShadow
                      geometry={nodes["Text006_02_-_Default_0"].geometry}
                      material={materials["02_-_Default"]}
                    />
                  </group>
                </group>
                <group
                  name="Circle002"
                  position={[-4.225, -27.126, 1.377]}
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={1.135}
                >
                  <mesh
                    name="Circle002_07_-_Default_0"
                    castShadow
                    receiveShadow
                    geometry={nodes["Circle002_07_-_Default_0"].geometry}
                    material={materials["07_-_Default"]}
                  />
                </group>
                <group
                  name="Circle003"
                  position={[-4.225, -19.174, 1.377]}
                  rotation={[-Math.PI / 2, 0, 0]}
                >
                  <mesh
                    name="Circle003_tech_pedestal_tech_pedestal_mat_0"
                    castShadow
                    receiveShadow
                    geometry={
                      nodes.Circle003_tech_pedestal_tech_pedestal_mat_0.geometry
                    }
                    material={materials.tech_pedestal_tech_pedestal_mat}
                  />
                </group>
                <group
                  name="Box002"
                  position={[73.526, 0, 1.377]}
                  rotation={[-Math.PI / 2, 0, 0]}
                >
                  <mesh
                    name="Box002_15_-_Default_0"
                    castShadow
                    receiveShadow
                    geometry={nodes["Box002_15_-_Default_0"].geometry}
                    material={materials["15_-_Default"]}
                  />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/robot_arm_animation.glb");